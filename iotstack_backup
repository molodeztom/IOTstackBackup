#!/bin/bash
# Ver 0.1 forked from Paraphraser IOTBACKUP do not use SCP and RSYNC
# 0.2 added combine to one tar file with datetime
# 0.3 + upload to Dropbox
# 0.4 c only upload new files
# 0.5 + delete backups
# 0.6 + encryption
# 0.7 + move archives to old to copy only last to dropbox
# 0.9 + retain last 8 backups only
# should not run as root
[ "$EUID" -eq 0 ] && echo "This script should NOT be run using sudo" && exit -1

# support user renaming of script
SCRIPT=$(basename "$0")

# define the purpose of the optional argument, with appropriate default
RUNTAG=${1:-$(date +"%Y-%m-%d_%H%M").$HOSTNAME}

if [ "$#" -gt 1 ]; then
    echo "Usage: $SCRIPT {runtag}"
	exit -1
fi

# define your backup host - note that if SCPPATH is within a Dropbox
# folder on SCPHOST then you will get Dropbox sync for free.
SCPHOST="myhost.mydomain.com"
SCPUSER="myuser"
SCPPATH="/path/to/backup/directory/on/myhost"

# choose a backup method. SCP saves the results of THIS backup run.
# RSYNC synchronises the RPi backup folder with SCPHOST.
# The essential difference is that RSYNC will result in old backups
# being removed from the target whereas, with SCP, old backups will be
# preserved until you take some action to remove them.
BACKUP_METHOD="DROPB"

# assumptions
IOTSTACK="$HOME/IOTstack"
COMPOSENAME="docker-compose.yml"
COMPOSE="$IOTSTACK/$COMPOSENAME"
BACKUPS="$IOTSTACK/backups"
LOGNAME="backup-log"
LOGFILE="$RUNTAG.$LOGNAME.txt"
GENERALNAME="general-backup"
INFLUXNAME="influx-backup"

# check the key assumptions
if ! [ -d "$IOTSTACK" -a -e "$COMPOSE" ] ; then
   echo "Error: One of the following does not exist:"
   echo "   $IOTSTACK"
   echo "   $COMPOSE"
   echo "This may indicate a problem with your installation."
   exit -1
fi

# make sure the backups directory exists, has correct ownership & mode
[ -d "$BACKUPS" ] || mkdir -m 755 -p "$BACKUPS"
[ $(stat -c "%U:%G" "$BACKUPS") = "$USER:$USER" ] || sudo chown $USER:$USER "$BACKUPS"
[ $(stat -c "%a" "$BACKUPS") = "755" ] || sudo chmod 755 "$BACKUPS"

# move into the backups directory
cd "$BACKUPS"

# ensure that the log exists and redirect to it
touch "$LOGFILE"
exec >> "$LOGFILE"
exec 2>> "$LOGFILE"

echo "----- Starting $SCRIPT at $(date) -----"

# perform the general backup
~/IOTstackBackup/iotstack_backup_general "$BACKUPS" "$RUNTAG"

# perform the influx backup
~/IOTstackBackup/iotstack_backup_influxdb "$BACKUPS" "$RUNTAG"

# copy the files (keep in mind that log entries written after the
# log is copied to the remote will only be in the local log).
case "$BACKUP_METHOD" in
  "SCP")
    #scp "$RUNTAG".* $SCPUSER@$SCPHOST:$SCPPATH
    ;;

  "RSYNC")
    # note that the slash after "$BACKUPS" is required!
    rsync -vrt --delete --exclude=influxdb "$BACKUPS"/ $SCPUSER@$SCPHOST:$SCPPATH
    ;;

  "DROPB")
    # all files in one tar archive with date time
    echo "Dropbox Backup"
    cd  ~/IOTstack/backups
    tar --exclude='./archive' --exclude='./archive_old' --exclude='./influxdb' -cf ./archive/$RUNTAG.FullBackup.tar .
    echo "encrypt archive"
    cd  ~/IOTstack/backups/archive
    gpg -c --passphrase-file /home/pi/user/pass --pinentry-mode loopback $RUNTAG.FullBackup.tar
    ~/Dropbox-Uploader/dropbox_uploader.sh -s upload * /
    mv -f ~/IOTstack/backups/archive/* /home/pi/IOTstack/backups/archive_old/
    rm ~/IOTstack/backups/*backup*
    #to change backups retained,  change below +8 to whatever you want (days retained +1)
    ls -t1 ~/IOTstack/backups/archive_old* | tail -n +2 | sudo xargs rm -f
    
;;
  *)
    echo "Warning: $BACKUP_METHOD backup method is not supported"
    echo "Warning: The only backup files are the ones in $BACKUPS"
    ;;

esac

# cleanup
ls -t1 *."$GENERALNAME".* 2>/dev/null | tail -n +8 | xargs rm -f
ls -t1 *."$INFLUXNAME".* 2>/dev/null | tail -n +8 | xargs rm -f
ls -t1 *."$LOGNAME".* 2>/dev/null | tail -n +8 | xargs rm -f

echo "----- Finished $SCRIPT at $(date) -----"
